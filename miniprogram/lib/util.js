import * as Digit from '../local/digit';

const PointNumLen = Digit.point.length;
const TimeNumLen = Digit.time.length;
/**
 * 生成 [min, max) 范围随机数
 */
export const randomIntegerInRange = (min, max) => Math.floor(Math.random() * (max - min)) + min;

export const sleep = time => new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve(true)
    }, time);
})
export const MonthWords = [
    {
        word: 'January',
        phonetic: "'dʒænju.eri",
        mean: '一月',
    },
    {
        word: 'February',
        phonetic: "'febru.eri",
        mean: '二月',
    },
    {
        word: 'March',
        phonetic: "mɑrtʃ",
        mean: '三月',
    },
    {
        word: 'April',
        phonetic: "'eɪprəl",
        mean: '四月',
    },
    {
        word: 'May',
        phonetic: "meɪ",
        mean: '五月',
    },
    {
        word: 'June',
        phonetic: "dʒun",
        mean: '六月',
    },
    {
        word: 'July',
        phonetic: "dʒʊˈlaɪ",
        mean: '七月',
    },
    {
        word: 'August',
        phonetic: "'ɔɡəst",
        mean: '八月',
    },
    {
        word: 'September',
        phonetic: "sep'tembər",
        mean: '九月',
    },
    {
        word: 'October',
        phonetic: "ɑk'toʊbər",
        mean: '十月',
    },
    {
        word: 'November',
        phonetic: "noʊ'vembər",
        mean: '十一月',
    },
    {
        word: 'December',
        phonetic: "dɪ'sembər",
        mean: '十二月',
    },
];

export const WeekWords = [
    {
        word: 'Monday',
        phonetic: "ˈmʌnˌdeɪ",
        mean: '星期一',
    },
    {
        word: 'Tuesday',
        phonetic: "ˈtuzˌdeɪ",
        mean: '星期二',
    },
    {
        word: 'Wednesday',
        phonetic: "ˈwenzˌdeɪ",
        mean: '星期三',
    },
    {
        word: 'Thursday',
        phonetic: "ˈθɜr(r)zdeɪ",
        mean: '星期四',
    },
    {
        word: 'Friday',
        phonetic: "ˈfraɪdeɪ",
        mean: '星期五',
    },
    {
        word: 'Saturday',
        phonetic: "ˈsætə(r)deɪ",
        mean: '星期六',
    },
    {
        word: 'Sunday',
        phonetic: "ˈsʌndeɪ",
        mean: '星期日',
    },
]


const FiveNums = [
    64547,55934,58348,76465,45516,56661,34639,65674,46917,12091,80367,50026,36296,46357,22055,71922,16107,15205,38880,75599,54808,92483,85896,33605,22063,82904,90851,64546,36085,51668,71771,70473,81022,48022,62845,72890,15538,69080,51412,29236,50214,37867,97873,43284,99587,15171,12179,95917,60843,49530,75144,93676,47124,58005,19909,95906,36133,54571,10811,76944,95115,99903,50141,23100,46763,23715,78949,66036,72209,10791,71714,63709,74233,19716,23583,49022,73493,65831,67166,29735,76160,31205,35683,64080,28461,66636,30526,54369,79737,49596,79314,96501,41524,79250,45045,30009,86588,39905,77011,71403,72346,73005,99734,97650,67382,47451,69677,62595,57736,47886,18086,45536,95712,93273,90536,73387,58386,93574,19537,23223,59742,31451,77523,94141,57566,35245,56830,29345,22702,34573,20524,57610,87544,40233,82851,73371,34683,34978,63374,47328,96351,23794,29720,69555,31017,96071,30450,63023,83932,87747,37061,21392,43031,82562,29336,81936,87540,75391,19904,32894,84234,97179,10355,10746,27414,53982,88804,83597,68107,57209,44228,56825,48886,73519,72753,16585,85005,45964,36660,35373,58528,28843,77292,55502,31869,30388,95902,89718,90324,11466,72368,14066,39576,31935,37065,87566,92124,79069,28880,38650,15914,71203,54537,13602,74141,78578,45123,19446,51037,93805,66024,48299,61437,32291,21312,73463,80466,15650,35345,38467,13241,91241,61287,29483,73105,27488,29630,74297,62973,40835,71964,88149,87130,65589,76824,45123,23222,94387,14716,39642,67703,16546,99915,20672,70168,20749,33967,82960,95567,55616,50590,79468,69354,17528,10857,49134,31704,63411,78587,56980,55289,52313,89100,53922,77703,37379,31832,56748,56594,10797,34762,75509,81977,59798,98354,24990,30139,16965,62919,74839,52786,10222,95802,90384,37046,66179,22822,53720,81385,36792,22878,58833,71376,54939,96036,99226,99907,83418,79807,95601,43975
]

const SixNums = [882915,184509,680613,721882,724593,210833,445407,815865,414872,591021,221153,776871,237028,554513,286343,151052,163295,638982,852675,751192,510463,132069,501343,802134,917308,217666,997084,477365,622155,596239,384437,366081,191590,236385,781824,848858,702977,860330,163675,639022,970031,188997,696508,385565,150433,757177,733204,687393,184911,251103,712191,867526,707215,900717,431832,765163,261204,982102,312969,879323,867636,178112,596710,963984,915531,263911,465540,970792,440516,765916,322909,211152,601378,206415,269179,239413,936467,230661,922185,296454,744810,685230,681105,151118,929894,976579,847830,669704,318182,491702,969671,818380,894351,683197,581770,388860,437566,477075,519928,977716,726544,130242,221869,522106,501015,408754,971829,626419,178909,606598,394882,103619,137322,141135,420012,398641,463881,198939,730697,276931,250490,793566,902693,793798,785777,452999,936897,220135,258954,179345,204248,938908,188196,391988,349768,928821,976081,854102,571790,177575,755498,358676,912750,656407,999807,369767,317511,831495,948505,424673,652429,978249,586237,353899,628596,535278,530945,561323,905192,232955,988504,277810,832163,191991,886658,929545,854017,989293,336816,825768,299678,477686,836332,774122,568584,321948,689584,298044,748038,650825,358750,346664,293955,252869,656727,248090,530208,385027,948189,963649,414689,834512,883219,553602,114439,387826,694466,240079,924539,337046,376844,808479,325968,726256,348814,838864,635286,978155,342040,496665,390168,420582,905102,197132,538030,174591,732540,944870,109415,688846,386722,544079,155834,455632,922499,181824,713627,395150,906286,702292,676589,540280,323912,757722,802626,131541,308972,684612,743152,839890,579049,929214,736410,323649,613643,287397,315316,702190,912232,544423,739709,182102,480772,820126,161569,809211,480275,776258,208713,623391,130947,865140,367287,397104,660587,403500,492989,284359,308839,416734,657126,537397,183756,837224,640312,165821,121442,105357,263486,535581,780138,746869,938703,230373,298106,705304,718044,512039,587797,501729,387542,117667,674622,749990,667636,342175,672005,211082,402852,674514,982085];

const SevenNums

const EightNums = [56904156,59021166,25956291,16009239,27377120,53641367,72120292,46281218,78667190,66323105,12097620,11575890,99791076,68935366,50952322,39650066,72133688,94602901,66826780,37380183,60847606,93589746,82887781,22105045,92220874,15563242,60524796,99170203,65344442,67772332,54151834,56638629,90584008,96658284,34412203,53398385,50550711,39847582,99064389,64929292,31032599,34676686,80466079,72040075,24496988,48992634,58247111,76832712,77361935,23288115,32532302,89576436,67507655,65172468,14041275,81701908,75870090,89252425,73204805,19564556,12932315,38757242,13407910,78605741,90064591,13672088,10158785,92636046,77841306,48100878,89889168,71658836,21530660,90996117,14366655,45857985,52051920,16878192,28208318,85767414,75578951,76263220,69169269,99249462,79541134,98713362,94861742,20024703,14421512,91523252,40329171,91069137,90971815,12612332,25128214,23447684,79964743,75908079,79166999,75029521,35226628,42537798,54977183,75904273,72027106,21175124,66025092,12333398,20371624,49811292,71744534,54135626,63869123,26454695,29661326,88727841,24722084,92772230,73362589,30431817,44326491,37838068,10775932,82536442,87757968,55531694,23745425,92171835,94356751,99036111,56361859,56821680,65267566,37717511,96065350,26428461,29319693,22150012,64964154,74976480,30975047,86316778,55700907,59731468,24280854,82520626,86663328,59318179,77688521,81483503,11581248,69386407,98911722,28514799,93387840,78347084,63408807,15578816,81552895,92164914,31310366,27448894,35612727,67210571,87760942,33046336,57618855,14296231,81375858,60012332,96513156,41721897,62798234,36334459,82640120,98704443,77122564,16392372,18666525,23890293,88568519,48446972,40702461,29679249,92697744,71452749,42931969,25235095,56707149,47268754,68402775,64473854,22680917,77576008,35268679,22906249,21094866,92737122,72955953,96587678,83014337,88071173,77914774,78965148,15754927,92662239,45618551,44457855,66658195,53438178,21571843,90498732,69892003,26644344,60360287,61204583,79059219,61576483,25004003,81292175,41269983,95514448,58407554,12945928,86736468,98347416,17436362,43164094,37553989,93001364,48778291,84544674,99064383,88735300,80583691,50244683,78489396,90016627,36931099,97018480,28126266,69556706,43725159,18728443,59615038,38072652,21998957,21256418,74646458,15824089,87876172,97639721,37947248,12289133,92160574,29478682,19087980,48585338,51077998,88354134,77567670,16178393,58768624,15167260,59872307,46266983,39631604,87574354,61116070,58101102,90069731,61002654,86688889,98156137,89559401,67168878,64807645,23565520,49108547,69644494,57756433,21309674,73641771,46854334,93771815,68764410,71912389,18268896,62140310,10606088,40217592,72840217,85827058,92649218,30197162,27127179,94731689,78479477,72374582,73835863,95448386];

const NightNums = [521007718,533889999,831818719,737974262,326948908,100734706,842081572,193873001,319230028,155577320,237294671,286231040,932482682,303354560,160046158,687458336,887898396,371941880,450186076,922460316,432387262,140097708,944727680,141561251,798809243,143048355,453385938,748674205,836606698,684802439,228030561,958953667,289522624,695966930,454389973,335446834,187817373,976552732,919657328,461396815,832759908,871242210,192274541,423975938,252485559,857061500,321984742,962066065,179626724,173217114,889764951,698234787,814345592,776568086,753473844,327219927,756835893,762330024,520936381,561889726,986247780,464122758,417660853,560025211,724591944,788213682,598291348,185009646,282903869,329831669,962983207,171822758,729729388,324662212,339159250,796478672,988622014,717532660,525270265,974454553,755337607,746426743,509749748,660512306,387875670,429136826,847417802,333133615,277661761,852316459,542186038,764499803,290751083,643092615,421508451,930473619,639570672,858449383,791981980,418113667,218533655,601706011,151440437,440287123,911114224,964577615,791324657,567054526,14906864,247268577,876157363,653555734,179903686,660453911,942496377,922150770,555551156,643403845,304006256,991828741,948313854,450008152,738512960,840423906,720653814,904254742,812737995,914872348,987340243,264019868,794756516,729211403,454801436,846211469,863337631,325693544,798272172,309151979,557998400,237752742,726948127,109497658,319338345,457988573,139029715,569901552,703448870,937370391,805625306,885522564,233115372,637849466,784574787,963269795,726599700,966188575,467995125,517923559,933629375,868404307,305431252,757308615,217016693,311137877,405122120,486852647,641743739,736792388,197594128,458240212,584147735,776041787,661464112,730793431,611562140,598932684,238474107,395184501,950832052,168180540,746602415,758413339,465069505,502138627,600276248,795658182,785213694,298262264,350557776,665614674,490946182,103567961,604629950,107618230,145878809,732880276,963771970,358451119,535591149,489495089,572543706];


export const randomOneTime = () => Digit.time[randomIntegerInRange(0, TimeNumLen)];

export const randomOnePhone = length => {

    let arr = [];
    if (length === 3) return () => randomIntegerInRange(100, 999);
    else if (length === 4) arr = Digit.phone4;
    else if (length === 6) arr = Digit.phone6;
    else if (length === 8) arr = Digit.phone8;
    else if (length === 10) arr = Digit.phone10;
    else if (length === 12) arr = Digit.phone12;
    else if (length === 16) arr = Digit.phone16;
    
    let len = arr.length;

    return () => arr[randomIntegerInRange(0, len)];
};

export const randomOneNum = length => {
    // 这里特殊处理一下，如果是1位数，让其包括0
    let min = gen10ExpNum(length - 1);
    if (length === 5) return FiveNums[randomIntegerInRange(0, FiveNums.length)]
    if (length === 6) return SixNums[randomIntegerInRange(0, SixNums.length)]
    else if (length === 7) return SevenNums[randomIntegerInRange(0, SevenNums.length)]
    else if (length === 8) return EightNums[randomIntegerInRange(0, EightNums.length)]
    else if (length === 9) return NightNums[randomIntegerInRange(0, NightNums.length)]

    else return randomIntegerInRange(min === 1 ? 0 : min, gen10ExpNum(length));
}

export const randomOneYear = () => randomIntegerInRange(1800, 2028);

export const randomPointNumber = () => {
    // return pointNum[randomIntegerInRange(0, pointNumLen)];
    return Digit.point[randomIntegerInRange(0, PointNumLen)]
}

export const randomOneWeek = () => {
    return randomIntegerInRange(1, 8);
}

export const genExpNum = (num, expNum) => {
    if (expNum === 0) return 1;

    let ret = num;
    for(let i = 0; i < expNum - 1; i++) {
        ret *= num;
    }
    return ret;
}

export const randomOneMonth = () => {
    return randomIntegerInRange(1, 13);
}

// “节流”函数（避免重复触发fn函数
export const throttle = (fn, wait = 300) => {
    let lastTime = null;
    return function () {
        let curTime = (new Date()).getTime();
        // 距离下次触发fn还需等待的时间(如果没有lastTime说明是第一次，可以表示执行，即等待时间为0
        let remainTime = lastTime ? wait - (curTime - lastTime) : 0;
        if (remainTime <= 0 || remainTime > wait) {
            lastTime = curTime;
            return fn.apply(this, arguments);
        }
    }
}

export const gen10ExpNum = expNum => genExpNum(10, expNum);

export const dateFormatter = (date, formatter) => {
    date = (date ? new Date(date) : new Date())
    const Y = date.getFullYear() + '',
        M = date.getMonth() + 1,
        D = date.getDate(),
        H = date.getHours(),
        m = date.getMinutes(),
        s = date.getSeconds()
    return formatter.replace(/YYYY|yyyy/g, Y)
        .replace(/YY|yy/g, Y.substr(2, 2))
        .replace(/MM/g, (M < 10 ? '0' : '') + M)
        .replace(/DD/g, (D < 10 ? '0' : '') + D)
        .replace(/HH|hh/g, (H < 10 ? '0' : '') + H)
        .replace(/mm/g, (m < 10 ? '0' : '') + m)
        .replace(/ss/g, (s < 10 ? '0' : '') + s)
}

// 是否同一天
export const isSameDay = (day1, day2) => {
    return day1.setHours(0, 0, 0, 0) === day2.setHours(0, 0, 0, 0)
}

// 是否为今天
export const isToday = day => {
    return isSameDay(new Date(), day)
}
// 是否为明天
export const isTomorrow = date => {
    let tomorrow = new Date(Date.now() + 24 * 3600 * 1000)
    return isSameDay(new Date(tomorrow), date)
}
// 是否为昨天
export const isYestday = date => {
    let curDate = new Date()
    let todayStart = new Date(
        curDate.getFullYear(),
        curDate.getMonth(),
        curDate.getDate()
    ).getTime()
    let yestdayStart = new Date(todayStart - 24 * 3600 * 1000).getTime()

    return date.getTime() < todayStart && yestdayStart <= date.getTime()
}
/**
 * 判断指定某一天 date 是否在range范围内
 * @param {*} day
 * @param {Array} range: [beginDay, endDay]
 */
export const dateIsBetween = (day, range) => {
    if (range[0].getTime() <= day.getTime() && day.getTime() <= range[1].getTime()) {
        return true
    } else return false
}


/**
 * 日期比较，仅仅比较天数
 * @param {*} day1
 * @param {*} day2
 * -1, 0, 1
 */
export const compareDate = (day1, day2) => {
    if (day1.setHours(0, 0, 0, 0) === day2.setHours(0, 0, 0, 0)) return 0;
    else return day1 > day2 ? 1 : -1;
}

/**
 * 根据指定日期，获取其所在一周的日期，
 * @param {*} date 
 */
export const getWeekByDate = date => {
    const dateOfToday = date.getTime();
    const dayOfToday = (new Date().getDay() + 7 - 1) % 7
    return Array.from(new Array(7))
      .map((_, i) => {
        return new Date(dateOfToday + (i - dayOfToday) * 1000 * 60 * 60 * 24)
      })
}

export const getDateByAddDay = (day, addDayNum) => {
    let t = new Date(day)
    t.setDate(t.getDate() + addDayNum)
    return t
}

export const getNext7dateByDate = date => {
    return [0, 1, 2, 3, 4, 5, 6].map(i => getDateByAddDay(date, i))
}
