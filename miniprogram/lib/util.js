import * as Digit from '../local/digit';

const PointNumLen = Digit.point.length;
const TimeNumLen = Digit.time.length;
/**
 * 生成 [min, max) 范围随机数
 */
export const randomIntegerInRange = (min, max) => Math.floor(Math.random() * (max - min)) + min;

export const sleep = time => new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve(true)
    }, time);
})
export const MonthWords = [
    {
        word: 'January',
        phonetic: "'dʒænju.eri",
        mean: '一月',
        audio: '/assets/audio/month/month_1.mp3',
    },
    {
        word: 'February',
        phonetic: "'febru.eri",
        mean: '二月',
        audio: '/assets/audio/month/month_2.mp3',
    },
    {
        word: 'March',
        phonetic: "mɑrtʃ",
        mean: '三月',
        audio: '/assets/audio/month/month_3.mp3',
    },
    {
        word: 'April',
        phonetic: "'eɪprəl",
        mean: '四月',
        audio: '/assets/audio/month/month_4.mp3',
    },
    {
        word: 'May',
        phonetic: "meɪ",
        mean: '五月',
        audio: '/assets/audio/month/month_5.mp3',
    },
    {
        word: 'June',
        phonetic: "dʒun",
        mean: '六月',
        audio: '/assets/audio/month/month_6.mp3',
    },
    {
        word: 'July',
        phonetic: "dʒʊˈlaɪ",
        mean: '七月',
        audio: '/assets/audio/month/month_7.mp3',
    },
    {
        word: 'August',
        phonetic: "'ɔɡəst",
        mean: '八月',
        audio: '/assets/audio/month/month_8.mp3',
    },
    {
        word: 'September',
        phonetic: "sep'tembər",
        mean: '九月',
        audio: '/assets/audio/month/month_9.mp3',
    },
    {
        word: 'October',
        phonetic: "ɑk'toʊbər",
        mean: '十月',
        audio: '/assets/audio/month/month_10.mp3',
    },
    {
        word: 'November',
        phonetic: "noʊ'vembər",
        mean: '十一月',
        audio: '/assets/audio/month/month_11.mp3',
    },
    {
        word: 'December',
        phonetic: "dɪ'sembər",
        mean: '十二月',
        audio: '/assets/audio/month/month_12.mp3',
    },
];

export const WeekWords = [
    {
        word: 'Monday',
        phonetic: "ˈmʌnˌdeɪ",
        mean: '星期一',
        audio: '/assets/audio/week/week_1.mp3',
    },
    {
        word: 'Tuesday',
        phonetic: "ˈtuzˌdeɪ",
        mean: '星期二',
        audio: '/assets/audio/week/week_2.mp3',
    },
    {
        word: 'Wednesday',
        phonetic: "ˈwenzˌdeɪ",
        mean: '星期三',
        audio: '/assets/audio/week/week_3.mp3',
    },
    {
        word: 'Thursday',
        phonetic: "ˈθɜr(r)zdeɪ",
        mean: '星期四',
        audio: '/assets/audio/week/week_4.mp3',
    },
    {
        word: 'Friday',
        phonetic: "ˈfraɪdeɪ",
        mean: '星期五',
        audio: '/assets/audio/week/week_5.mp3',
    },
    {
        word: 'Saturday',
        phonetic: "ˈsætə(r)deɪ",
        mean: '星期六',
        audio: '/assets/audio/week/week_6.mp3',
    },
    {
        word: 'Sunday',
        phonetic: "ˈsʌndeɪ",
        mean: '星期日',
        audio: '/assets/audio/week/week_7.mp3',
    },
]

const SixNums = ["100003", "100048", "100126", "100135", "100169", "100214", "100223", "100224", "100225", "103744", "127958", "152530", "163897", "174146", "176814", "226948", "232615", "253499", "255695", "255841", "265210", "273520", "327526", "343043", "361085", "362618", "375360", "408038", "469762", "470306", "472241", "479018", "508829", "575357", "635875", "650760", "662248", "678676", "719586", "736393", "750018", "783915", "788319", "811166", "833069", "889969", "894916", "900522", "937846", "942246", "955138", "958514", "960650", "966382", "988830", "996555", "996796", "999169"];

const SevenNums = ["1001441","1003632","1020069","1060285","1083803","1107627","1111737","1113947","1132394","1191345","1239017","1243654","1304912","1415610","1447428","1463986","1541529","1572305","1673439","1698584","1700099","1750748","1762724","1766792","1839132","1841040","1842693","1855018","1866587","1909196","1949239","1962020","1978997","2013189","2042528","2078988","2109684","2128558","2188591","2283506","2398990","2501558","2510778","2541258","2564429","2609772","2615049","2687131","2715904","2721554","2746616","2749078","2763196","2767461","2888398","2925919","2927003","2949765","2969647","3047597","3064656","3072937","3117407","3122922","3127161","3202257","3225138","3250116","3260170","3277433","3307614","3325512","3368152","3374162","3391404","3449125","3453450","3538397","3554464","3562073","3562677","3585292","3594506","3625637","3650024","3664384","3724472","3774753","3865345","3868176","3868655","3875649","3897733","3926941","3956942","3962283","3977828","4028979","4047741","4048673","4049785","4121793","4129076","4237064","4247872","4258025","4297999","4326730","4332990","4350228","4365927","4378270","4379116","4413295","4413930","4424356","4463476","4471576","4472880","4476976","4560954","4603857","4645360","4667706","4690986","4716793","4740443","4786122","4825241","4858124","4893124","4903305","4948316","5041995","5054771","5076381","5092536","5092868","5114697","5119347","5154279","5171900","5174874","5175147","5208922","5236248","5280873","5313864","5321958","5331102","5358329","5386661","5426491","5471120","5500274","5516547","5519586","5534121","5542177","5545536","5602034","5645421","5671279","5696163","5704609","5730898","5744190","5762232","5771916","5806057","5818999","5868380","5901693","5909995","5956890","5961170","5975556","6011141","6058500","6086803","6144058","6154795","6242737","6271260","6279463","6340808","6346712","6351497","6354274","6396285","6449068","6456887","6462632","6475807","6477553","6489260","6535531","6575052","6639631","6659391","6669987","6697702","6733125","6772979","6784569","6839356","6868545","6875977","6882251","7006583","7033878","7071018","7078648","7115913","7214368","7254529","7291504","7386018","7390760","7407005","7420708","7428331","7464465","7495921","7516388","7539697","7558359","7580302","7605812","7635331","7651130","7656859","7684001","7686306","7686814","7689482","7752320","7793591","7802885","7837977","7856095","7866665","7887095","7931283","7965572","8028725","8030683","8045215","8051644","8072012","8084800","8156198","8256142","8292016","8316231","8325083","8346845","8362054","8387952","8459145","8460279","8486538","8556238","8556273","8628007","8661818","8671436","8678074","8685501","8689315","8743249","8788153","8793865","8796711","8801149","8839372","8888493","8891144","8973231","8979447","8991044","8995259","9000684","9008657","9028890","9044946","9061858","9076295","9115167","9162211","9195963","9245069","9255555","9283843","9291371","9291464","9345467","9402594","9406250","9431406","9440178","9466861","9477538","9506418","9511912","9557924","9558850","9671690","9687198","9706096","9714931","9736898","9758861","9775237","9780971","9817867","9847914","9853867","9868183","9899936","9905132","9906544","9914207","9915384","9966881","9987149"];

const EightNums = ["10789629","10923893","11078859","11138192","11402165","11707600","11812941","12268615","13553137","15092906","15243874","16275305","17069968","17446823","18194517","18697832","18703133","19582486","20031675","20196646","20372860","21042023","21650508","21881476","22134732","22783792","23553342","23637684","23691532","23844707","23847427","24786890","24929882","25812285","25887256","26571746","27011962","27497875","27735802","28341587","28451761","28626114","28905720","28919835","29047815","29470866","31563168","31759929","32726744","33116440","33680716","34484230","34557496","35854358","37530810","37541959","37601512","37808344","38641654","39065834","39110303","39990414","40001552","40377559","41278853","41533883","41733589","42469574","44023458","44296680","44395132","45104316","45257304","45280772","46026005","47465065","48101692","48294831","48331447","48817387","48971008","49116499","49431293","49683855","50086786","50102379","50239346","50378008","50430623","51637654","51887793","52035759","52243629","52450126","53155931","53283545","53392233","56076964","56840292","57203012","57952161","58010975","58345724","60080693","60378122","61032431","61578265","61613212","61872096","62877819","63382184","63894966","66003677","66196434","67473572","68519819","68842371","69508217","69933449","70044444","70279460","71877004","72871840","73098308","73206413","73593943","73760623","73890814","74776675","74961026","74966362","75573809","75636682","76886944","76940992","77266037","77340600","78347322","78631588","78669560","78987475","79001864","79085738","79165479","79441630","79565263","80156856","80465660","80900497","80926607","80988381","81013604","81208506","81227160","81303387","81360905","81837323","84451688","85151642","85157964","85688698","85749838","85816787","85817284","86405496","86641883","87595411","87847241","88149251","88340779","88676780","89693841","90152026","90275137","91218680","91324164","91877470","92241530","92519227","93031498","93162519","94905337","95793089","96072923","96253056","96370275","96787738","97544776","98666186","98738446"];

const NightNums = ["103532325","106664665","108004212","122616876","130477491","133680921","136183677","138973384","147717027","164212635","168349419","184427763","194585580","199089411","201738993","204598106","230671492","231466070","235258472","249409034","254877208","273401736","274707983","276621178","277584727","280937727","281835561","282062456","285255524","302672937","305852723","306228194","308208914","310518507","315158979","315681852","316794084","316867182","321477101","336562136","340150900","341079177","351000629","356997743","374387028","377433611","385092800","386935442","393867529","407376447","421532170","423361240","424581479","445861982","450487967","453967792","453981560","462847108","467188454","470649992","475819517","487308772","487528492","489625419","495941864","496523195","498045188","501265677","504993660","524054969","524843972","538600574","545326272","551338968","555199279","560953988","561890176","567957672","570699824","578536754","583029544","584991115","594885284","604853327","610423229","619893500","620598978","625999114","628182261","634294397","636301243","640156760","640920680","641597711","643908278","657114749","658791421","665735881","673144374","679489702","680114378","680411914","691695925","708145362","719292402","730850942","742326659","743600834","743766138","755300358","763629535","766264228","771880555","772916842","773991358","774466203","774617805","785221876","787506481","788544687","791362176","792753635","803898559","806513008","809357272","809475884","816471329","821247460","825669638","828478415","844591397","846163332","847629203","848459223","856830169","862925169","863946919","866638151","869131964","873333965","876030067","880706249","898874726","907165988","919516869","934148643","934879609","941063068","944490766","949856325","956383779","956418131","957386864","957577343","958029073","964149267","968379505","993537854","995439599","997133660"];


export const fourPhones = ["1022","1072","1157","1160","1200","1263","1282","1321","1358","1459","1559","1585","1593","1662","1746","1799","1808","1809","1811","1837","1923","1970","1992","2002","2013","2065","2115","2176","2208","2233","2278","2446","2489","2567","2586","2611","2663","2772","2798","2801","2803","2828","2846","2854","2908","2943","3027","3139","3174","3255","3306","3406","3437","3444","3544","3566","3602","3612","3616","3637","3667","3761","3788","3807","3872","3958","4032","4033","4038","4109","4260","4273","4329","4350","4424","4432","4514","4515","4560","4573","4608","4662","4691","4693","4701","4858","5012","5021","5042","5100","5112","5127","5252","5314","5338","5357","5455","5487","5498","5507","5522","5556","5580","5630","5686","5698","5755","5760","5885","5896","5921","5975","5985","6037","6074","6097","6104","6124","6137","6176","6182","6407","6420","6426","6475","6496","6549","6554","6649","6670","6677","6710","6847","6872","6891","6892","6893","6900","6937","6947","6956","6967","7129","7168","7179","7225","7227","7306","7389","7392","7411","7436","7487","7556","7570","7587","7596","7627","7785","7796","7879","7975","7997","8107","8123","8137","8184","8200","8269","8324","8336","8475","8480","8600","8656","8670","8749","8780","8796","8836","8949","8989","9152","9181","9242","9272","9503","9524","9525","9680","9690","9726","9741","9761","9919","9981","9990","9995"].map(item => parseInt(item));

export const sixPhones = ["103128","107395","107731","108144","110429","111846","119550","120553","120587","124140","124649","126701","128591","129963","134687","138633","141581","143598","145408","146554","147072","148356","148824","155266","157543","162886","163987","169342","170587","175398","203354","211746","216738","222990","223635","248499","251148","253557","254128","256921","262621","269524","271774","273215","273763","283512","288037","290228","292192","292407","295005","295314","296541","300274","302001","302702","319662","319765","321189","324832","325972","328591","336890","346739","349993","351530","361386","365724","367858","368777","389911","392959","408249","417475","424276","435801","436242","437321","444618","444837","448146","448897","449194","452298","458275","467636","468195","471367","474328","477383","482761","484401","485904","488294","493733","497527","504343","508515","513446","515600","515721","515723","517819","523217","524095","524856","528932","536261","538386","539184","540198","542287","542709","543049","543228","544533","553003","564392","568319","574111","589358","591960","607965","608758","610680","613279","614033","618954","628514","632443","640259","656572","657928","658697","663038","664904","665036","681105","689515","701195","709742","713485","717767","719059","721114","721979","731174","747439","753324","757354","759084","760669","762346","762809","765021","765026","767036","773384","781275","786666","787434","791322","794907","799195","811758","817291","820759","826964","829286","834200","835978","860706","863452","869292","870158","873330","880630","882268","884896","889894","895005","896111","904763","908881","915374","915898","919978","923668","924198","947277","948336","951930","953918","959230","959552","962098","962956","968292"].map(item => parseInt(item));

export const eightPhones = ["11799765", "13981342", "15100990", "16967709", "18792071", "19495517", "20888442", "21745867", "21892437", "31096870", "36147953", "36737566", "37280571", "37613984", "37802749", "41288380", "48405645", "53057306", "55583344", "57149554", "58522501", "59029339", "60206962", "63323598", "64827914", "68399646", "68611400", "79973713", "80977480", "81099669", "83148042", "86104492", "87892680", "90612889", "94423656", "95875949", "97197512", "98247962", "98635280", "98925716"].map(item => parseInt(item));

const ALL_TIMES = ["1230", "1235", "1245", "0100", "0115", "0225", "0230", "0305", "0335", "0405", "0445", "0450", "0505", "0540", "0545", "0610", "0615", "0710", "0715", "0725", "0730", "0810", "0825", "0855", "0905", "0925", "1005", "1015", "1030", "1200", "1205", "1330", "1340", "1410", "1430", "1435", "1545", "1550", "1555", "1600", "1605", "1620", "1630", "1645", "1710", "1730", "1800", "1910", "2000", "2010", "2020", "2025", "2040", "2045", "2050", "2135", "2210", "2215", "2220", "2235", "2255", "2300", "2320"];


export const randomOneTime = () => Digit.time[randomIntegerInRange(0, TimeNumLen)];

export const randomOnePhone = length => {

    let arr = [];
    if (length === 4) arr = Digit.phone4;
    else if (length === 6) arr = Digit.phone6;
    else if (length === 8) arr = Digit.phone8;
    else if (length === 10) arr = Digit.phone10;
    else if (length === 12) arr = Digit.phone12;
    else if (length === 16) arr = Digit.phone16;
    
    let len = arr.length;

    return () => arr[randomIntegerInRange(0, len)];
};

export const randomOneNum = length => {
    // 这里特殊处理一下，如果是1位数，让其包括0
    let min = gen10ExpNum(length - 1);
    
    if (length === 6) return SixNums[randomIntegerInRange(0, SixNums.length)]
    else if (length === 7) return SevenNums[randomIntegerInRange(0, SevenNums.length)]
    else if (length === 8) return EightNums[randomIntegerInRange(0, EightNums.length)]
    else if (length === 9) return NightNums[randomIntegerInRange(0, NightNums.length)]

    else return randomIntegerInRange(min === 1 ? 0 : min, gen10ExpNum(length));
}

export const randomOneYear = () => {
    return randomIntegerInRange(1800, 2028);
}

export const randomPointNumber = () => {
    // return pointNum[randomIntegerInRange(0, pointNumLen)];
    return Digit.point[randomIntegerInRange(0, PointNumLen)]
}

export const randomOneWeek = () => {
    return randomIntegerInRange(1, 8);
}

export const genExpNum = (num, expNum) => {
    if (expNum === 0) return 1;

    let ret = num;
    for(let i = 0; i < expNum - 1; i++) {
        ret *= num;
    }
    return ret;
}

export const randomOneMonth = () => {
    return randomIntegerInRange(1, 13);
}

// “节流”函数（避免重复触发fn函数
export const throttle = (fn, wait = 300) => {
    let lastTime = null;
    return function () {
        let curTime = (new Date()).getTime();
        // 距离下次触发fn还需等待的时间(如果没有lastTime说明是第一次，可以表示执行，即等待时间为0
        let remainTime = lastTime ? wait - (curTime - lastTime) : 0;
        if (remainTime <= 0 || remainTime > wait) {
            lastTime = curTime;
            return fn.apply(this, arguments);
        }
    }
}

export const gen10ExpNum = expNum => genExpNum(10, expNum);

export const dateFormatter = (date, formatter) => {
    date = (date ? new Date(date) : new Date())
    const Y = date.getFullYear() + '',
        M = date.getMonth() + 1,
        D = date.getDate(),
        H = date.getHours(),
        m = date.getMinutes(),
        s = date.getSeconds()
    return formatter.replace(/YYYY|yyyy/g, Y)
        .replace(/YY|yy/g, Y.substr(2, 2))
        .replace(/MM/g, (M < 10 ? '0' : '') + M)
        .replace(/DD/g, (D < 10 ? '0' : '') + D)
        .replace(/HH|hh/g, (H < 10 ? '0' : '') + H)
        .replace(/mm/g, (m < 10 ? '0' : '') + m)
        .replace(/ss/g, (s < 10 ? '0' : '') + s)
}

// 是否同一天
export const isSameDay = (day1, day2) => {
    return day1.setHours(0, 0, 0, 0) === day2.setHours(0, 0, 0, 0)
}

// 是否为今天
export const isToday = day => {
    return isSameDay(new Date(), day)
}
// 是否为明天
export const isTomorrow = date => {
    let tomorrow = new Date(Date.now() + 24 * 3600 * 1000)
    return isSameDay(new Date(tomorrow), date)
}
// 是否为昨天
export const isYestday = date => {
    let curDate = new Date()
    let todayStart = new Date(
        curDate.getFullYear(),
        curDate.getMonth(),
        curDate.getDate()
    ).getTime()
    let yestdayStart = new Date(todayStart - 24 * 3600 * 1000).getTime()

    return date.getTime() < todayStart && yestdayStart <= date.getTime()
}
/**
 * 判断指定某一天 date 是否在range范围内
 * @param {*} day
 * @param {Array} range: [beginDay, endDay]
 */
export const dateIsBetween = (day, range) => {
    if (range[0].getTime() <= day.getTime() && day.getTime() <= range[1].getTime()) {
        return true
    } else return false
}


/**
 * 日期比较，仅仅比较天数
 * @param {*} day1
 * @param {*} day2
 * -1, 0, 1
 */
export const compareDateByDay = (day1, day2) => {
    if (day1.setHours(0, 0, 0, 0) === day2.setHours(0, 0, 0, 0)) return 0;
    else return day1 > day2 ? 1 : -1;
}

/**
 * 根据指定日期，获取其所在一周的日期，
 * @param {*} date 
 */
export const getWeekByDate = date => {
    const dateOfToday = date.getTime();
    const dayOfToday = (new Date().getDay() + 7 - 1) % 7
    return Array.from(new Array(7))
      .map((_, i) => {
        return new Date(dateOfToday + (i - dayOfToday) * 1000 * 60 * 60 * 24)
      })
}